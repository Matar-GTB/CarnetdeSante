import { Op } from 'sequelize';
import Document from '../models/Document.js';
import DocumentPartage from '../models/DocumentPartage.js';

/**
 * ‚úÖ Middleware g√©n√©rique de v√©rification de r√¥le
 * @param {Array} roles - R√¥les autoris√©s
 */
export const checkRole = (roles) => (req, res, next) => {
  if (!req.user) return res.status(401).json({ error: "Utilisateur non authentifi√©" });

  if (!roles.includes(req.user.role)) {
    return res.status(403).json({
      error: "Acc√®s refus√©. R√¥le insuffisant",
      attendu: roles,
      actuel: req.user.role
    });
  }

  next();
};

/**
 * üîÑ V√©rifie si l'utilisateur acc√®de √† son propre profil ou son patient
 */
export const patientOrMedecin = async (req, res, next) => {
  const targetUserId = parseInt(req.params.userId);
  const userId = req.user.userId;

  if (!req.user) return res.status(401).json({ error: 'Authentification requise' });

  const isSelf = targetUserId === userId;

  // ‚ö† Optionnel : logiques avanc√©es de lien m√©decin-patient
  const isMedecin = req.user.role === 'medecin';
  // const isOwnPatient = await ... (√† d√©finir si tu impl√©mentes les relations patient-traitant)

  if (req.user.role !== 'admin' && !isSelf /* && !isOwnPatient */) {
    return res.status(403).json({ error: 'Acc√®s non autoris√© √† ce profil' });
  }

  next();
};

/**
 * üìÅ V√©rifie l‚Äôacc√®s √† un document m√©dical partag√© ou appartenant √† l'utilisateur
 */
export const documentAccess = async (req, res, next) => {
  const documentId = parseInt(req.params.id);
  const userId = req.user.userId;
  const isAdmin = req.user.role === 'admin';

  try {
    const document = await Document.findByPk(documentId);

    if (!document) {
      return res.status(404).json({ error: "Document non trouv√©" });
    }

    // Acc√®s direct si propri√©taire ou admin
    if (document.utilisateur_id === userId || isAdmin) {
      return next();
    }

    // Sinon v√©rifier s'il a √©t√© partag√©
    const shared = await DocumentPartage.findOne({
      where: {
        partage_id: { [Op.not]: null }, // Id√©alement √† relier √† un partage actif
        document_id: documentId
      }
    });

    if (!shared) {
      return res.status(403).json({ error: "Acc√®s au document non autoris√©" });
    }

    next();
  } catch (error) {
    console.error('Erreur acc√®s document :', error);
    res.status(500).json({ error: 'Erreur interne serveur' });
  }
};